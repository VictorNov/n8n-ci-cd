name: Deploy to Production

permissions:
  contents: write
  issues: write
  actions: write

on:
  push:
    branches: [ prod ]

jobs:
  deploy-to-production:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need at least 2 commits to compare changes

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Inject API key into existing config
        run: |
          jq --arg key "${{ secrets.N8N_API_KEY }}" '.n8n.apiKey = $key' config/n8n-config.json > tmp.json && mv tmp.json config/n8n-config.json

      - name: Detect workflows to deploy from commit changes
        id: detect_workflows
        run: |
          echo "üîç Detecting workflows to deploy from commit changes"

          commit_sha="${{ github.sha }}"
          echo "Analyzing changes in commit: $commit_sha"

          # Get the list of changed files in the workflows directory
          changed_workflow_files=$(git diff --name-only HEAD~1 HEAD -- workflows/*.json 2>/dev/null || echo "")

          workflows=""
          workflow_count=0
          version=""

          # Method 1: Check for changed workflow files
          if [[ -n "$changed_workflow_files" ]]; then
            echo "üìÇ Changed workflow files:"
            echo "$changed_workflow_files"

            # Convert file paths to workflow names
            while IFS= read -r file; do
              if [[ -n "$file" && "$file" =~ ^workflows/(.+)\.json$ ]]; then
                # Extract filename without extension
                filename="${BASH_REMATCH[1]}"

                # Convert filename to readable workflow name
                # Replace underscores with spaces and capitalize words
                workflow_name=$(echo "$filename" | sed 's/_/ /g' | sed 's/\b\w/\U&/g')

                if [[ -n "$workflows" ]]; then
                  workflows="$workflows,$workflow_name"
                else
                  workflows="$workflow_name"
                fi

                workflow_count=$((workflow_count + 1))
                echo "‚úÖ Found workflow: $workflow_name (from $file)"
              fi
            done <<< "$changed_workflow_files"
          fi

          # Method 2: Fallback to first workflow in directory
          if [[ -z "$workflows" ]]; then
            echo "‚ö†Ô∏è No workflow files changed in this commit"
            echo "üîÑ Falling back to first workflow in workflows directory..."

            if [[ ! -d "workflows" ]]; then
              echo "‚ùå workflows directory does not exist"
              exit 1
            fi

            # Get the first workflow file (alphabetically)
            first_workflow_file=$(ls workflows/*.json 2>/dev/null | head -n1)

            if [[ -z "$first_workflow_file" ]]; then
              echo "‚ùå No .json files found in workflows directory"
              exit 1
            fi

            echo "üìÅ Available workflow files:"
            ls -la workflows/*.json 2>/dev/null

            # Extract filename and convert to workflow name
            filename=$(basename "$first_workflow_file" .json)
            workflow_name=$(echo "$filename" | sed 's/_/ /g' | sed 's/\b\w/\U&/g')

            workflows="$workflow_name"
            workflow_count=1

            echo "‚úÖ Using fallback workflow: $workflow_name (from $first_workflow_file)"
          fi

          # Extract version from the latest tag for the first workflow
          if [[ -n "$workflows" ]]; then
            # Get the first workflow name
            first_workflow=$(echo "$workflows" | cut -d ',' -f1)
            echo "üîç Extracting version from latest tag for: $first_workflow"

            # Convert workflow name to tag format
            tag_prefix=$(echo "$first_workflow" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/^-*//;s/-*$//' | sed 's/--*/-/g')

            # Find the latest tag for this workflow
            latest_tag=$(git tag -l "${tag_prefix}-*" --sort=-version:refname | head -n1)

            if [[ -n "$latest_tag" ]]; then
              echo "üìã Found latest tag: $latest_tag"

              # Extract version from tag (remove workflow prefix)
              version=$(echo "$latest_tag" | sed "s/${tag_prefix}-//")
              # Remove 'v' prefix if present
              version=$(echo "$version" | sed 's/^v//')

              echo "üìä Extracted version: $version"
            else
              echo "‚ö†Ô∏è No tag found for workflow: $first_workflow"
            fi
          fi

          echo "workflows=$workflows" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "üéØ Detected $workflow_count workflow(s) to deploy: $workflows"
          if [[ -n "$version" ]]; then
            echo "üè∑Ô∏è Using version: $version"
          fi

      - name: Validate workflow files exist
        run: |
          echo "üîç Validating workflow files exist and are readable"

          IFS=',' read -ra WORKFLOWS <<< "${{ steps.detect_workflows.outputs.workflows }}"

          for workflow in "${WORKFLOWS[@]}"; do
            workflow=$(echo "$workflow" | xargs)  # Trim whitespace

            # Convert workflow name back to filename
            filename=$(echo "$workflow" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g' | sed 's/^_*//;s/_*$//')
            filepath="workflows/${filename}.json"

            echo "Checking: $workflow -> $filepath"

            if [[ ! -f "$filepath" ]]; then
              echo "‚ùå Workflow file not found: $filepath"
              echo "Available files in workflows directory:"
              ls -la workflows/ 2>/dev/null || echo "workflows directory not accessible"
              exit 1
            fi

            # Validate JSON format
            if ! jq empty "$filepath" 2>/dev/null; then
              echo "‚ùå Invalid JSON format in: $filepath"
              exit 1
            fi

            echo "‚úÖ Validated: $filepath"
          done

      - name: Run full deployment
        run: |
          echo "üöÄ Running full deployment process"

          node scripts/deployment-manager.js full-deploy \
            "${{ steps.detect_workflows.outputs.workflows }}" \
            "false" \
            "${{ github.actor }}" \
            "${{ github.sha }}" \
            "${{ steps.detect_workflows.outputs.version }}"

      - name: Update releases with deployment status
        if: success()
        run: |
          echo "üè∑Ô∏è Updating releases with deployment status"

          IFS=',' read -ra WORKFLOWS <<< "${{ steps.detect_workflows.outputs.workflows }}"

          for workflow in "${WORKFLOWS[@]}"; do
            workflow=$(echo "$workflow" | xargs)  # Trim whitespace
            echo "Processing deployment status for: $workflow"

            # Convert workflow name to tag format
            tag_prefix=$(echo "$workflow" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g' | sed 's/^_*//;s/_*$//')

            # Find the latest tag for this workflow
            latest_tag=$(git tag -l "${tag_prefix}-v*" --sort=-version:refname | head -n1)

            if [[ -n "$latest_tag" ]]; then
              echo "üìã Found release tag: $latest_tag"

              # Update release notes with deployment info (using gh CLI)
              current_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
              deployment_note="

              ## üöÄ Deployment Status
              - **Deployed to Production**: $current_time
              - **Commit**: ${{ github.sha }}
              - **Deployed by**: ${{ github.actor }}
              - **Status**: ‚úÖ Successfully deployed"

              # Note: In real usage, you might want to update the release
              echo "Would update release $latest_tag with deployment info"
              # gh release edit "$latest_tag" --notes-file <(echo "$deployment_note") || true
            else
              echo "‚ö†Ô∏è No release tag found for workflow: $workflow"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create deployment summary
        run: |
          echo "üìä Creating deployment summary"

          cat > deployment-summary.md << EOF
          # Production Deployment Summary

          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit**: ${{ github.sha }}
          **Triggered by**: ${{ github.actor }}
          **Workflows Deployed**: ${{ steps.detect_workflows.outputs.workflows }}
          $([ -n "${{ steps.detect_workflows.outputs.version }}" ] && echo "**Version**: ${{ steps.detect_workflows.outputs.version }}")

          ## Deployed Workflows
          EOF

          IFS=',' read -ra WORKFLOWS <<< "${{ steps.detect_workflows.outputs.workflows }}"

          for workflow in "${WORKFLOWS[@]}"; do
            workflow=$(echo "$workflow" | xargs)
            filename=$(echo "$workflow" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g' | sed 's/^_*//;s/_*$//')

            echo "- **$workflow** (workflows/${filename}.json)" >> deployment-summary.md
          done

          echo "" >> deployment-summary.md
          echo "## Deployment Details" >> deployment-summary.md
          echo "- Repository: ${{ github.repository }}" >> deployment-summary.md
          echo "- Branch: ${{ github.ref_name }}" >> deployment-summary.md
          echo "- Run ID: ${{ github.run_id }}" >> deployment-summary.md

          echo "üìÑ Deployment summary created"
          cat deployment-summary.md

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-deployment-${{ github.run_number }}
          path: |
            workflows/backups/
            backups/
            logs/
            deployment-summary.md
          retention-days: 90

      - name: Notify deployment completion
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "Workflows deployed: ${{ steps.detect_workflows.outputs.workflows }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
          if [[ -n "${{ steps.detect_workflows.outputs.version }}" ]]; then
            echo "Version: ${{ steps.detect_workflows.outputs.version }}"
          fi
