name: Create Release Candidate

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  workflow_dispatch:
    inputs:
      workflow_name:
        description: 'Workflow base name for release candidate (e.g., "My Workflow")'
        required: true
      version:
        description: 'Release version (e.g., "1.0.0"). Leave empty to auto-increment'
        required: false
      version_increment:
        description: 'Version increment type when auto-incrementing'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '22'

jobs:
  create-release-candidate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup workflow variables
        id: setup
        run: |
          workflow_name="${{ github.event.inputs.workflow_name }}"
          
          # Generate consistent naming formats
          workflow_prefix=$(echo "$workflow_name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/^-*//;s/-*$//' | sed 's/--*/-/g')
          workflow_filename=$(echo "$workflow_name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g' | sed 's/^_*//;s/_*$//')
          
          echo "workflow_name=$workflow_name" >> $GITHUB_OUTPUT
          echo "workflow_prefix=$workflow_prefix" >> $GITHUB_OUTPUT
          echo "workflow_filename=$workflow_filename" >> $GITHUB_OUTPUT
          echo "workflow_file=${workflow_filename}.json" >> $GITHUB_OUTPUT
          
          echo "📋 Workflow setup complete:"
          echo "  Name: $workflow_name"
          echo "  Prefix: $workflow_prefix"
          echo "  Filename: ${workflow_filename}.json"

      - name: Determine release version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            version="${{ github.event.inputs.version }}"
            echo "🏷️ Using provided version: $version"
          else
            echo "🔍 Auto-incrementing version..."
          
            workflow_prefix="${{ steps.setup.outputs.workflow_prefix }}"
            increment_type="${{ github.event.inputs.version_increment }}"
          
            # Find the latest tag for this workflow
            latest_tag=$(git tag -l "${workflow_prefix}-*" --sort=-version:refname | head -n1)
          
            if [ -z "$latest_tag" ]; then
              version="1.0.0"
              echo "🆕 No previous tags found, starting with: $version"
            else
              current_version=$(echo "$latest_tag" | sed "s/${workflow_prefix}-//" | sed 's/^v//')
              echo "📊 Current version: $current_version"
          
              if [[ $current_version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                major=${BASH_REMATCH[1]}
                minor=${BASH_REMATCH[2]}
                patch=${BASH_REMATCH[3]}
          
                case "$increment_type" in
                  "major")
                    version="$((major + 1)).0.0"
                    ;;
                  "minor")
                    version="${major}.$((minor + 1)).0"
                    ;;
                  "patch"|*)
                    version="${major}.${minor}.$((patch + 1))"
                    ;;
                esac
                echo "⬆️ Incremented to: $version"
              else
                version="1.0.0"
                echo "⚠️ Unexpected version format, defaulting to: $version"
              fi
            fi
          fi
          
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=$version" >> $GITHUB_ENV

      - name: Inject API key
        run: |
          jq --arg key "${{ secrets.N8N_API_KEY }}" '.n8n.apiKey = $key' config/n8n-config.json > tmp.json && mv tmp.json config/n8n-config.json

      - name: Ensure prod branch exists
        run: |
          echo "🌿 Ensuring prod branch exists"
          node scripts/release-manager.js ensure-prod-branch

      - name: Analyze workflow changes
        run: |
          echo "🔍 Analyzing workflow changes"
          node scripts/release-manager.js analyze "${{ steps.setup.outputs.workflow_name }}" "${{ steps.version.outputs.version }}"

      - name: Create release tag
        id: tag
        run: |
          echo "🏷️ Creating release tag"
          tag_name=$(node scripts/release-manager.js create-tag "${{ steps.setup.outputs.workflow_name }}" "${{ steps.version.outputs.version }}")
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
          echo "TAG_NAME=$tag_name" >> $GITHUB_ENV

      - name: Create release candidate branch
        id: branch
        run: |
          echo "🌿 Creating release candidate branch"
          rc_branch=$(node scripts/release-manager.js create-branch "${{ steps.setup.outputs.workflow_name }}" "${{ steps.version.outputs.version }}")
          echo "rc_branch=$rc_branch" >> $GITHUB_OUTPUT
          echo "RC_BRANCH=$rc_branch" >> $GITHUB_ENV

      - name: Prepare PR body (file)
        id: pr_body
        run: |
          WORKFLOW_CHANGES_CONTENT="No workflow changes file found."
          if [ -f "workflow_changes.md" ]; then
            WORKFLOW_CHANGES_CONTENT="$(cat workflow_changes.md)"
          fi

          cat > pr_body.md <<'EOF'
          ## Release Candidate: ${{ steps.setup.outputs.workflow_name }} ${{ steps.version.outputs.version }}
          
          ### 📦 Release Metadata
          ```yaml
          workflow_name: ${{ steps.setup.outputs.workflow_name }}
          workflow_prefix: ${{ steps.setup.outputs.workflow_prefix }}
          workflow_filename: ${{ steps.setup.outputs.workflow_filename }}
          workflow_file: ${{ steps.setup.outputs.workflow_file }}
          version: ${{ steps.version.outputs.version }}
          tag_name: ${{ env.TAG_NAME }}
          ```
          
          **Created by:** ${{ github.actor }}
          **Release Tag:** ${{ env.TAG_NAME }}
          **Version:** ${{ steps.version.outputs.version }} ${{ github.event.inputs.version && '(manually specified)' || format('(auto-incremented {0})', github.event.inputs.version_increment) }}
          
          ### 📋 Pre-deployment Checklist
          - [ ] Dev workflow has been tested thoroughly
          - [ ] No critical issues identified
          - [ ] Stakeholders have been notified
          - [ ] Breaking changes documented
          - [ ] Rollback plan confirmed
          
          ### 📊 Workflow Changes
          EOF

          # Append changes after heredoc to preserve ${{ }} expressions above
          echo "" >> pr_body.md
          echo "${WORKFLOW_CHANGES_CONTENT}" >> pr_body.md
          echo "" >> pr_body.md

          # Keep a copy for release notes fallbacks
          cp pr_body.md pr_notes.md

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          gh --version
          gh auth status || true

      - name: Create or update pull request to prod (gh)
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          set -e
          BASE_BRANCH="prod"
          HEAD_BRANCH="${RC_BRANCH}"

          # Try to create PR, otherwise edit/update
          if ! gh pr create \
              --base "$BASE_BRANCH" \
              --head "$HEAD_BRANCH" \
              --title "🚀 Release ${{ steps.version.outputs.version }}: ${{ steps.setup.outputs.workflow_name }}" \
              --body-file pr_body.md; then
            echo "PR may already exist. Updating it…"
            # Find existing PR and update title/body
            PR_NUMBER=$(gh pr list --base "$BASE_BRANCH" --head "$HEAD_BRANCH" --state open --json number -q '.[0].number')
            if [ -n "$PR_NUMBER" ]; then
              gh pr edit "$PR_NUMBER" \
                --title "🚀 Release ${{ steps.version.outputs.version }}: ${{ steps.setup.outputs.workflow_name }}" \
                --body-file pr_body.md
            else
              echo "No existing open PR found; attempting reopen or create again."
              gh pr create \
                --base "$BASE_BRANCH" \
                --head "$HEAD_BRANCH" \
                --title "🚀 Release ${{ steps.version.outputs.version }}: ${{ steps.setup.outputs.workflow_name }}" \
                --body-file pr_body.md
            fi
          fi

      - name: Create GitHub Release (gh)
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Choose notes file: prefer workflow_changes.md if it exists, else pr_notes.md
          NOTES_FILE="workflow_changes.md"
          if [ ! -f "$NOTES_FILE" ]; then
            NOTES_FILE="pr_notes.md"
          fi

          # Create release if it doesn't exist; otherwise update
          if gh release view "${TAG_NAME}" >/dev/null 2>&1; then
            echo "Release ${TAG_NAME} exists. Updating notes…"
            gh release edit "${TAG_NAME}" --notes-file "$NOTES_FILE" --title "${{ steps.setup.outputs.workflow_name }} ${{ steps.version.outputs.version }}"
          else
            echo "Creating release ${TAG_NAME}…"
            gh release create "${TAG_NAME}" \
              --title "${{ steps.setup.outputs.workflow_name }} ${{ steps.version.outputs.version }}" \
              --notes-file "$NOTES_FILE"
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-candidate-${{ steps.setup.outputs.workflow_name }}-${{ steps.version.outputs.version }}
          path: |
            workflow_changes.md
            pr_body.md
            pr_notes.md
            RELEASE_INFO_*.md
            workflows/${{ steps.setup.outputs.workflow_file }}