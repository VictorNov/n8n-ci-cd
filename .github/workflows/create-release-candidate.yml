name: Create Release Candidate

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  workflow_dispatch:
    inputs:
      workflow_name:
        description: |
          Workflow base name for release candidate (e.g., "My Workflow").:
        required: true
      version:
        description: 'Release version (e.g., "1.0.0"). Leave empty to auto-increment minor version'
        required: false

jobs:
  create-release-candidate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine release version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            # Use provided version
            version="${{ github.event.inputs.version }}"
            echo "üè∑Ô∏è Using provided version: $version"
          else
            # Auto-increment minor version
            echo "üîç Auto-incrementing minor version..."
          
            # Get the latest tag for this workflow
            workflow_prefix=$(echo "${{ github.event.inputs.workflow_name }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g' | sed 's/^_*//;s/_*$//')
            latest_tag=$(git tag -l "${workflow_prefix}-v*" --sort=-version:refname | head -n1)
          
            if [ -z "$latest_tag" ]; then
              # No previous tags, start with 1.0.0
              version="1.0.0"
              echo "üÜï No previous tags found, starting with: $version"
            else
              # Extract version from tag (remove workflow prefix and 'v')
              current_version=$(echo "$latest_tag" | sed "s/${workflow_prefix}-v//")
              echo "üìä Current version: $current_version"
          
              # Parse semantic version
              if [[ $current_version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                major=${BASH_REMATCH[1]}
                minor=${BASH_REMATCH[2]}
                patch=${BASH_REMATCH[3]}
          
                # Increment minor version, reset patch to 0
                new_minor=$((minor + 1))
                version="${major}.${new_minor}.0"
                echo "‚¨ÜÔ∏è Auto-incremented to: $version"
              else
                # Fallback if version format is unexpected
                version="1.0.0"
                echo "‚ö†Ô∏è Unexpected version format, defaulting to: $version"
              fi
            fi
          fi
          
          echo "RELEASE_VERSION=$version" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm install

      - name: Inject API key into existing config
        run: |
          jq --arg key "${{ secrets.N8N_API_KEY }}" '.n8n.apiKey = $key' config/n8n-config.json > tmp.json && mv tmp.json config/n8n-config.json

      - name: Ensure prod branch exists
        run: |
          echo "üåø Ensuring prod branch exists"
          node scripts/release-manager.js ensure-prod-branch

      - name: Analyze workflow changes
        id: analyze
        run: |
          echo "üîç Analyzing workflow changes"
          node scripts/release-manager.js analyze "${{ github.event.inputs.workflow_name }}" "${{ env.RELEASE_VERSION }}"
          
          # Get the workflow filename - simple fallback approach
          echo "üîç Setting workflow filename..."
          workflow_file=$(echo "${{ github.event.inputs.workflow_name }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g' | sed 's/^_*//;s/_*$//' | sed 's/$/.json/')
          echo "‚úÖ Using filename: $workflow_file"
          echo "workflow_file=${workflow_file}" >> $GITHUB_OUTPUT

      - name: Create release tag
        run: |
          echo "üè∑Ô∏è Creating release tag"
          tag_name=$(node scripts/release-manager.js create-tag "${{ github.event.inputs.workflow_name }}" "${{ env.RELEASE_VERSION }}")
          echo "TAG_NAME=$tag_name" >> $GITHUB_ENV

      - name: Create release candidate branch
        run: |
          echo "üåø Creating release candidate branch"
          rc_branch=$(node scripts/release-manager.js create-branch "${{ github.event.inputs.workflow_name }}" "${{ env.RELEASE_VERSION }}")
          echo "RC_BRANCH=$rc_branch" >> $GITHUB_ENV

      - name: Prepare PR body
        id: pr_body
        run: |
          echo "üìù Preparing PR body with workflow changes"
          
          # Read workflow changes if file exists
          if [ -f "workflow_changes.md" ]; then
            echo "WORKFLOW_CHANGES<<EOF" >> $GITHUB_OUTPUT
            cat workflow_changes.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "WORKFLOW_CHANGES=No workflow changes file found." >> $GITHUB_OUTPUT
          fi

      - name: Create pull request to prod
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ env.RC_BRANCH }}
          destination_branch: prod
          pr_title: "üöÄ Release ${{ env.RELEASE_VERSION }}: ${{ github.event.inputs.workflow_name }}"
          pr_body: |
            ## Release Candidate: ${{ github.event.inputs.workflow_name }} ${{ env.RELEASE_VERSION }}
            
            **Created by:** ${{ github.actor }}
            **Release Tag:** ${{ env.TAG_NAME }}
            **Version:** ${{ env.RELEASE_VERSION }} ${{ github.event.inputs.version && '(manually specified)' || '(auto-incremented)' }}
            
            ### üìã Pre-deployment Checklist
            - [ ] Dev workflow has been tested thoroughly
            - [ ] No critical issues identified
            - [ ] Stakeholders have been notified
            - [ ] Breaking changes documented
            - [ ] Rollback plan confirmed
            
            ### üìä Workflow Changes
            
            ${{ steps.pr_body.outputs.WORKFLOW_CHANGES }}
            
            ### üö® Important Notes
            - A backup will be created automatically before deployment
            
            ### üîÑ Rollback Instructions
            If issues occur after deployment, use:
            ```bash
            npm run backup:restore [backup-name]
            ```
          github_token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: "${{ github.event.inputs.workflow_name }} ${{ env.RELEASE_VERSION }}"
          body_path: workflow_changes.md
          draft: false
          prerelease: false

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-candidate-${{ github.event.inputs.workflow_name }}-${{ env.RELEASE_VERSION }}
          path: |
            workflow_changes.md
            RELEASE_INFO_*.md
            workflows/${{ steps.analyze.outputs.workflow_file }}