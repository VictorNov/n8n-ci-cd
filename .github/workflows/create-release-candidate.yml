name: 2. Create PR to PROD (Release Candidate)

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  workflow_dispatch:
    inputs:
      workflow_name:
        description: 'Workflow base name for release candidate (e.g., "My Workflow")'
        required: true
      version:
        description: 'Release version (e.g., "1.0.0"). Leave empty to auto-increment'
        required: false
      version_increment:
        description: 'Version increment type when auto-incrementing'
        required: false
        default: 'patch'
        type: choice
        options: [patch, minor, major]

env:
  NODE_VERSION: '22'

jobs:
  create-release-candidate:
    runs-on: ubuntu-latest
    env:
      # Prefer PAT if provided; else fall back to GITHUB_TOKEN
      GH_TOKEN: ${{ secrets.PAT_TOKEN != '' && secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup workflow variables
        id: setup
        run: |
          workflow_name="${{ github.event.inputs.workflow_name }}"
          workflow_prefix=$(echo "$workflow_name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/^-*//;s/-*$//' | sed 's/--*/-/g')
          workflow_filename=$(echo "$workflow_name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g' | sed 's/^_*//;s/_*$//')

          {
            echo "workflow_name=$workflow_name"
            echo "workflow_prefix=$workflow_prefix"
            echo "workflow_filename=$workflow_filename"
            echo "workflow_file=${workflow_filename}.json"
          } >> "$GITHUB_OUTPUT"

      - name: Determine release version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            version="${{ github.event.inputs.version }}"
            version_note="(manually specified)"
          else
            workflow_prefix="${{ steps.setup.outputs.workflow_prefix }}"
            inc="${{ github.event.inputs.version_increment }}"
            latest_tag=$(git tag -l "${workflow_prefix}-*" --sort=-version:refname | head -n1)

            if [ -z "$latest_tag" ]; then
              version="1.0.0"
            else
              current_version=$(echo "$latest_tag" | sed "s/${workflow_prefix}-//" | sed 's/^v//')
              if [[ $current_version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                major=${BASH_REMATCH[1]}
                minor=${BASH_REMATCH[2]}
                patch=${BASH_REMATCH[3]}
                case "$inc" in
                  major) version="$((major+1)).0.0" ;;
                  minor) version="${major}.$((minor+1)).0" ;;
                  *)     version="${major}.${minor}.$((patch+1))" ;;
                esac
              else
                version="1.0.0"
              fi
            fi
            version_note="(auto-incremented ${inc:-patch})"
          fi

          echo "version=$version" >> "$GITHUB_OUTPUT"
          {
            echo "RELEASE_VERSION=$version"
            echo "VERSION_NOTE=$version_note"
          } >> "$GITHUB_ENV"

      - name: Inject API key
        run: |
          jq --arg key "${{ secrets.N8N_API_KEY }}" '.n8n.apiKey = $key' config/n8n-config.json > tmp.json && mv tmp.json config/n8n-config.json

      - name: Ensure prod branch exists
        run: node scripts/release-manager.js ensure-prod-branch

      - name: Analyze workflow changes
        run: node scripts/release-manager.js analyze "${{ steps.setup.outputs.workflow_name }}" "${{ steps.version.outputs.version }}"

      - name: Create release tag
        id: tag
        run: |
          tag_name=$(node scripts/release-manager.js create-tag "${{ steps.setup.outputs.workflow_name }}" "${{ steps.version.outputs.version }}")
          echo "tag_name=$tag_name" >> "$GITHUB_OUTPUT"
          echo "TAG_NAME=$tag_name" >> "$GITHUB_ENV"

      - name: Create release candidate branch
        id: branch
        run: |
          rc_branch=$(node scripts/release-manager.js create-branch "${{ steps.setup.outputs.workflow_name }}" "${{ steps.version.outputs.version }}")
          echo "rc_branch=$rc_branch" >> "$GITHUB_OUTPUT"
          echo "RC_BRANCH=$rc_branch" >> "$GITHUB_ENV"

      - name: Prepare PR body file
        run: |
          workflow_name="${{ steps.setup.outputs.workflow_name }}"
          workflow_prefix="${{ steps.setup.outputs.workflow_prefix }}"
          workflow_filename="${{ steps.setup.outputs.workflow_filename }}"
          workflow_file="${{ steps.setup.outputs.workflow_file }}"
          version="${{ steps.version.outputs.version }}"
          tag_name="${TAG_NAME}"
          actor="${{ github.actor }}"
          version_note="${VERSION_NOTE}"

          changes="No workflow changes file found."
          if [ -f "workflow_changes.md" ]; then
            changes="$(cat workflow_changes.md)"
          fi

          cat > pr_body.md <<EOF
          ## Release Candidate: ${workflow_name} ${version}
          
          ### ðŸ“¦ Release Metadata
            \`\`\`yaml
          workflow_name: ${workflow_name}
          workflow_prefix: ${workflow_prefix}
          workflow_filename: ${workflow_filename}
          workflow_file: ${workflow_file}
          version: ${version}
          tag_name: ${tag_name}
            \`\`\`
            
            **Created by:** ${actor}
            **Release Tag:** ${tag_name}
            **Version:** ${version} ${version_note}
          
          ### ðŸ“‹ Pre-deployment Checklist
          - [ ] Dev workflow has been tested thoroughly
          - [ ] No critical issues identified
          - [ ] Stakeholders have been notified
          - [ ] Breaking changes documented
          - [ ] Rollback plan confirmed
          
          ### ðŸ“Š Workflow Changes
            
            ${changes}
          
          ### ðŸš¨ Important Notes
          - Merging this PR will automatically deploy to production
          - A backup will be created automatically before deployment
          
          ### ðŸ”„ Rollback Instructions
          If issues occur after deployment, use:
            \`\`\`bash
            npm run backup:restore [backup-name]
            \`\`\`
            EOF
            
            cp pr_body.md pr_notes.md
          
          - name: Verify GitHub CLI auth
            run: |
              gh --version
              gh auth status || gh auth token >/dev/null

      - name: Create or update PR to prod
        run: |
          BASE_BRANCH="prod"
          HEAD_BRANCH="${RC_BRANCH}"
          TITLE="ðŸš€ Release ${{ steps.version.outputs.version }}: ${{ steps.setup.outputs.workflow_name }}"
          
          if ! gh pr create --base "$BASE_BRANCH" --head "$HEAD_BRANCH" --title "$TITLE" --body-file pr_body.md; then
            PR_NUMBER="$(gh pr list --base "$BASE_BRANCH" --head "$HEAD_BRANCH" --state open --json number -q '.[0].number')"
            if [ -n "$PR_NUMBER" ]; then
              gh pr edit "$PR_NUMBER" --title "$TITLE" --body-file pr_body.md
            else
              gh pr create --base "$BASE_BRANCH" --head "$HEAD_BRANCH" --title "$TITLE" --body-file pr_body.md
            fi
          fi

      - name: Create or update GitHub Release
        run: |
          NOTES_FILE="workflow_changes.md"
          [ -f "$NOTES_FILE" ] || NOTES_FILE="pr_notes.md"
          TITLE="${{ steps.setup.outputs.workflow_name }} ${{ steps.version.outputs.version }}"
          
          if gh release view "${TAG_NAME}" >/dev/null 2>&1; then
            gh release edit "${TAG_NAME}" --notes-file "$NOTES_FILE" --title "$TITLE"
          else
            gh release create "${TAG_NAME}" --title "$TITLE" --notes-file "$NOTES_FILE"
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-candidate-${{ steps.setup.outputs.workflow_name }}-${{ steps.version.outputs.version }}
          path: |
            workflow_changes.md
            pr_body.md
            pr_notes.md
            RELEASE_INFO_*.md
            workflows/${{ steps.setup.outputs.workflow_file }}