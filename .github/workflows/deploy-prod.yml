name: Sync Workflows to Production

permissions:
  contents: write
  issues: write

on:
  workflow_dispatch:
    inputs:
      workflows:
        description: 'Workflow base names to sync (comma-separated)'
        required: true
      skip_backup:
        description: 'Skip backup creation'
        required: false
        default: false
        type: boolean
      custom_backup_name:
        description: 'Custom backup name (optional)'
        required: false
        default: ''

jobs:
  approve-production-sync:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Manual approval required
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ vars.PRODUCTION_APPROVERS }}
          minimum-approvals: 1
          issue-title: "üöÄ Production Sync Approval: ${{ github.event.inputs.workflows }}"
          issue-body: |
            ## Production Workflow Sync Request

            **Workflows to sync:** ${{ github.event.inputs.workflows }}
            **Requested by:** ${{ github.actor }}
            **Skip backup:** ${{ github.event.inputs.skip_backup }}

            ### Pre-sync Checklist
            - [ ] Dev workflows have been tested
            - [ ] No critical issues identified
            - [ ] Stakeholders notified

            **‚ö†Ô∏è This will update production workflows. Please review carefully.**

  sync-to-production:
    runs-on: ubuntu-latest
    needs: approve-production-sync

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Inject API key into existing config
        run: |
          jq --arg key "${{ secrets.N8N_API_KEY }}" '.n8n.apiKey = $key' config/n8n-config.json > tmp.json && mv tmp.json config/n8n-config.json

      - name: Create automatic backup
        if: github.event.inputs.skip_backup != 'true'
        run: |
          echo "üíæ Creating automatic backup before sync..."
          
          if [[ -n "${{ github.event.inputs.custom_backup_name }}" ]]; then
            backup_name="pre_sync_${{ github.event.inputs.custom_backup_name }}_$(date +%Y%m%d_%H%M%S)"
          else
            backup_name="pre_sync_auto_$(date +%Y%m%d_%H%M%S)"
          fi
          
          node scripts/manage-workflows.js backup prod "$backup_name"
          echo "‚úÖ Backup created: $backup_name"
          echo "BACKUP_NAME=$backup_name" >> $GITHUB_ENV

      - name: Validate workflows before sync
        run: |
          echo "üîç Validating workflows before production sync..."

          # Parse workflow names
          IFS=',' read -ra WORKFLOWS <<< "${{ github.event.inputs.workflows }}"

          for workflow in "${WORKFLOWS[@]}"; do
            workflow=$(echo "$workflow" | xargs) # trim whitespace
            echo "Validating dev workflow: ${workflow}-dev"

            # Add validation logic here
            # For now, just check if dev version exists
            node -e "
              const manager = require('./scripts/manage-workflows.js');
              const m = new manager();
              m.getAllWorkflows().then(workflows => {
                const devWorkflow = workflows.find(w => w.name === '${workflow}-dev');
                if (!devWorkflow) {
                  console.error('‚ùå Dev workflow not found: ${workflow}-dev');
                  process.exit(1);
                }
                console.log('‚úÖ Found dev workflow: ${workflow}-dev');
              });
            "
          done

      - name: Sync workflows to production
        run: |
          echo "üöÄ Syncing workflows to production..."

          # Parse and sync each workflow
          IFS=',' read -ra WORKFLOWS <<< "${{ github.event.inputs.workflows }}"

          for workflow in "${WORKFLOWS[@]}"; do
            workflow=$(echo "$workflow" | xargs) # trim whitespace
            echo "Syncing: $workflow"
            node scripts/manage-workflows.js sync "$workflow"
          done

      - name: Post-sync verification
        run: |
          echo "üîç Verifying production sync..."

          # Check that all workflows were synced successfully
          IFS=',' read -ra WORKFLOWS <<< "${{ github.event.inputs.workflows }}"

          for workflow in "${WORKFLOWS[@]}"; do
            workflow=$(echo "$workflow" | xargs)
            echo "Checking production workflow: ${workflow}-prod"

            node -e "
              const manager = require('./scripts/manage-workflows.js');
              const m = new manager();
              m.getAllWorkflows().then(workflows => {
                const prodWorkflow = workflows.find(w => w.name === '${workflow}-prod');
                if (!prodWorkflow) {
                  console.error('‚ùå Production workflow not found after sync: ${workflow}-prod');
                  process.exit(1);
                }
                console.log('‚úÖ Verified production workflow: ${workflow}-prod');
              });
            "
          done

      - name: Create sync summary with backup info
        run: |
          echo "## Production Sync Summary" > sync-summary.md
          echo "" >> sync-summary.md
          echo "**Synced workflows:** ${{ github.event.inputs.workflows }}" >> sync-summary.md
          echo "**Approved by:** Production approvers" >> sync-summary.md
          echo "**Deployed by:** ${{ github.actor }}" >> sync-summary.md
          echo "**Date:** $(date -u)" >> sync-summary.md
          echo "**Backup created:** ${{ github.event.inputs.skip_backup != 'true' && 'Yes' || 'No' }}" >> sync-summary.md
          
          if [[ "${{ github.event.inputs.skip_backup }}" != "true" ]]; then
          echo "**Backup name:** $BACKUP_NAME" >> sync-summary.md
          echo "" >> sync-summary.md
          echo "### Rollback Instructions" >> sync-summary.md
          echo "If issues occur, you can restore from the backup:" >> sync-summary.md
          echo '```bash' >> sync-summary.md
          echo "npm run backup:restore $BACKUP_NAME" >> sync-summary.md
          echo '```' >> sync-summary.md
          echo "Or use GitHub Actions: Emergency Restore workflow" >> sync-summary.md
          fi
          
          echo "" >> sync-summary.md
          echo "**‚ö†Ô∏è Important:** All synced workflows are imported as INACTIVE for safety." >> sync-summary.md
          echo "Please manually activate them in n8n after verification." >> sync-summary.md

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n "$(git status --porcelain)" ]]; then
            git add workflows/backups/
            git commit -m "sync: deploy ${{ github.event.inputs.workflows }} to production with backup"
            git push
          fi

      - name: Upload sync artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-sync-${{ github.run_number }}
          path: |
            workflows/backups/
            sync-summary.md

#      - name: Notify production sync
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          channel: '#prod-deployments'
#          text: |
#            üöÄ PRODUCTION SYNC ${{ job.status }}!
#
#            Workflows: ${{ github.event.inputs.workflows }}
#            Synced by: ${{ github.actor }}
#          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
#        if: always()
